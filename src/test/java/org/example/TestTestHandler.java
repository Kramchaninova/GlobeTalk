package org.example;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class TestTestHandler {

    private final TestHandler testHandler = new TestHandler();

    private String testText;

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
     */
    @BeforeEach
    void testGenerateTest() {
        testText = """
                1 (1 points)
                What is the capital of France?
                A. London
                B. Paris
                C. Madrid
                D. Rome
                Answer: B
                
                2 (2 points)
                Which word is a verb?
                A. Apple
                B. Run
                C. Table
                D. House
                Answer: B
                
                3 (3 points)
                Choose the correct sentence:
                A. He go to school.
                B. He goes to school.
                C. He going to school.
                D. He gone to school.
                Answer: B
                """;

        testHandler.generateTest(12345L, testText);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
     * –û–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ TestHendler, —Ç–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∏–∏ –≤ –≤–∏–¥–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
     */
    @Test
    void testCorrectVsIncorrectScoreDifference() {
        String simpleTest = """
            1 (10 points)
            Simple question?
            A. Wrong
            B. Correct
            C. Wrong
            D. Wrong
            Answer: B
            """;

        // –¢–ï–°–¢ 1: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        testHandler.generateTest(11111L, simpleTest);
        //–ø—Å–µ–≤–¥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
        //–∏ –≤ correctFinalResponse –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞–ª–ª—ã
        String correctFinalResponse = testHandler.handleAnswer("B_button", 11111L);

        // –¢–ï–°–¢ 2: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        testHandler.generateTest(22222L, simpleTest);
        //—Ç–æ–∂–µ —Å–∞–º–æ–µ, –Ω–æ –±–∞–ª–ª—ã –Ω–µ –Ω–∞—á–∏–ª—è—é—Ç—Å—è
        String incorrectFinalResponse = testHandler.handleAnswer("A_button", 22222L);

        // –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º 10 –±–∞–ª–ª–æ–≤ (—É–∫–∞–∑–∞–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
        //—Ç—É—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ assertTrue, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É, –∞ –∏–º–µ–Ω–Ω–æ –∫–æ–ª–≤–æ –±–∞–ª–ª–æ–≤
        Assertions.assertTrue(correctFinalResponse.contains("10 –∏–∑ 10"),
                "–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –±–∞–ª–ª—ã. –ü–æ–ª—É—á–µ–Ω–æ: " + correctFinalResponse);

        // –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º 0 –±–∞–ª–ª–æ–≤
        Assertions.assertTrue(incorrectFinalResponse.contains("0 –∏–∑ 10"),
                "–ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –±–∞–ª–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è. –ü–æ–ª—É—á–µ–Ω–æ: " + incorrectFinalResponse);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å A1-A2
     */
    @Test
    void testFinalAnswerMinimalLevel() {
        String customTestText = """
                1 (6 points)
                Test question?
                A. Wrong
                B. Correct
                C. Wrong
                D. Wrong
                Answer: B
                """;

        testHandler.generateTest(12345L, customTestText);
        String finalResponse = testHandler.handleAnswer("A_button", 12345L);

        String expectedResponse = "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéâ\n\n" +

                "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n" +
                "üèÜ –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: 0 –∏–∑ 6 –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n" +
                "üìà –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º: A1-A2 (–ù–∞—á–∞–ª—å–Ω—ã–π)\n\n" +

                "‚ú® **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** ‚ú®\n\n";

        Assertions.assertEquals(expectedResponse, finalResponse);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å C1-C2.
     */
    @Test
    void testFinalAnswerMaximalLevel() {
        String customTestText = """
                1 (14 points)
                Test question?
                A. Wrong
                B. Correct
                C. Wrong
                D. Wrong
                Answer: B
                """;

        testHandler.generateTest(12345L, customTestText);
        String finalResponse = testHandler.handleAnswer("B_button", 12345L);

        String expectedResponse = "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéâ\n\n" +

                "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n" +
                "üèÜ –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: 14 –∏–∑ 14 –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n" +
                "üìà –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º: C1-C2 (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)\n\n" +

                "‚ú® **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** ‚ú®\n\n";

        Assertions.assertEquals(expectedResponse, finalResponse);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –∏ –≤ –∫–æ–Ω—Ü–µ –≤—ã–≤–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å B1-B2
     */
    @Test
    void testScoreCalculation() {
        String testText = """
                1 (6 points)
                Question 1?
                A. Wrong
                B. Correct
                C. Wrong
                D. Wrong
                Answer: B
                
                2 (6 points)
                Question 2?
                A. Wrong
                B. Correct
                C. Wrong
                D. Wrong
                Answer: B
                
                3 (6 points)
                Question 3?
                A. Wrong
                B. Correct
                C. Wrong
                D. Wrong
                Answer: B
                """;

        testHandler.generateTest(99999L, testText); // –î–†–£–ì–û–ô chatId —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
        testHandler.handleAnswer("B_button", 99999L);//–≤–∫—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç (+6 –±–∞–ª–ª–æ–≤)
        testHandler.handleAnswer("A_button", 99999L); //–Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
        String finalResponse = testHandler.handleAnswer("B_button", 99999L);//–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç

        String expectedResponse = "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéâ\n\n" +

                "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n" +
                "üèÜ –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: 12 –∏–∑ 18 –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n" +
                "üìà –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º: B1-B2 (–°—Ä–µ–¥–Ω–∏–π)\n\n" +

                "‚ú® **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** ‚ú®\n\n";

        Assertions.assertEquals(expectedResponse, finalResponse);
    }
}
