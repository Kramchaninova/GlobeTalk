package org.example;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Map;

public class TestKeyboardService {

    private final BotLogic botLogic = new BotLogic();
    private final KeyboardService keyboardService = new KeyboardService();

    /**
     * –¢–µ—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ –∫–Ω–æ–ø–æ–∫
     */
    @Test
    void testStartKeyboardButtons() {
        Map<String, String> startButtons = keyboardService.getStartButtonConfigs();

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è yes_button
        Assertions.assertEquals("yes_button", startButtons.get("–ö–æ–Ω–µ—á–Ω–æ!"));

        //–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è no_button
        Assertions.assertEquals("no_button", startButtons.get("–ù–∞–∑–∞–¥"));

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        Assertions.assertEquals(2, startButtons.size());
    }
    /**
     * –¢–µ—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ –∫–Ω–æ–ø–æ–∫
     */
    @Test
    void testAnswerKeyboardButtons() {
        Map<String, String> answerButtons = keyboardService.getTestAnswerConfigs();

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ A, B, C, D
        Assertions.assertEquals("A_button", answerButtons.get("A"));
        Assertions.assertEquals("B_button", answerButtons.get("B"));
        Assertions.assertEquals("C_button", answerButtons.get("C"));
        Assertions.assertEquals("D_button", answerButtons.get("D"));

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
        Assertions.assertEquals(4, answerButtons.size(),
                "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ");
    }

    /**
     * –¢–µ—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ
     */
    @Test
    void testMainKeyboardButton(){
        Map<String, String> answerButtons = keyboardService.getMainButtonCallBack();
        Assertions.assertEquals("main_button", answerButtons.get("–ù–∞ –ì–ª–∞–≤–Ω—É—é"));
    }

    /**
     * –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (no_button)
     */
    @Test
    void testNoButtonProcessing() {
        String response = botLogic.processCallbackData("no_button", 12345L);

        String expectedResponse =
                "üí™ *–ù–µ —Å–æ–º–Ω–µ–≤–∞–π—Ç–µ—Å—å –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö!* üí™\n\n" +
                        "üìñ –¢–µ—Å—Ç –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å\n\n" +
                        "üïê –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start\n\n" +
                        "üîç –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ /help";

        Assertions.assertEquals(expectedResponse, response);
    }

    /**
     * –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "–ù–∞ –ì–ª–∞–≤–Ω—É—é" (main_button) (–ø–æ —Ñ–∞–∫—Ç—É –æ–Ω–∞ –≤—ã–±–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É)
     */
    @Test
    void testMainButton(){
        String response = botLogic.processCallbackData("main_button", 12345L);

        String expectedResponse =
                "üåç *GlobeTalk - –ò–∑—É—á–µ–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤* üåç\n\n" +

                        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n" +
                        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n" +
                        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +

                        "üéØ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**\n\n" +
                        "GlobeTalk –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ —á–µ—Ä–µ–∑:\n" +
                        "‚Ä¢ üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è\n\n" +

                        "üõ†Ô∏è **–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:****\n" +
                        "‚Ä¢ üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n" +
                        "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n" +

                        "üí° **–ö–∞–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:**\n" +
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é (—Å–ª–µ–≤–∞)\n" +
                        "‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n" +
                        "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞\n" +
                        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n" +

                        "üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å!**";

        Assertions.assertEquals(expectedResponse, response);
    }
}
