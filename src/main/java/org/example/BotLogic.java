package org.example;

import org.telegram.telegrambots.meta.api.objects.Update;
import java.util.ArrayList;
import java.util.List;

/**
 * BotLogic - –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞.
 * –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–º–∞–Ω–¥—ã –∏ callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–Ω–æ–ø–æ–∫
 */


public class BotLogic {
    private final StartCommand startCommand;
    private final TestHandler testHandler;
    private final KeyboardService keyboardService;

    public BotLogic(){
        this.testHandler = new TestHandler();
        this.startCommand = new StartCommand(this.testHandler);
        this.keyboardService = new KeyboardService();
    }

    private static final String COMMAND_HELP =  "üåç *GlobeTalk - –ò–∑—É—á–µ–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤* üåç\n\n" +

            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n" +
            "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n" +
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +

            "üéØ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**\n\n" +
            "GlobeTalk –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ —á–µ—Ä–µ–∑:\n" +
            "‚Ä¢ üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è\n\n" +

            "üõ†Ô∏è **–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:****\n" +
            "‚Ä¢ üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n" +
            "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n" +

            "üí° **–ö–∞–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:**\n" +
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é (—Å–ª–µ–≤–∞)\n" +
            "‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n" +
            "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞\n" +
            "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n" +

            "üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å!**";


    private static final String COMMAND_UNKNOWN = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –∫–Ω–æ–ø–æ–∫
     */
    public String processCallbackData(String callbackData, long chatId) {
        if (callbackData.equals("A_button") ||
                callbackData.equals("B_button") ||
                callbackData.equals("C_button") ||
                callbackData.equals("D_button")) {
            return testHandler.handleAnswer(callbackData, chatId);
        } else {
            return startCommand.handleButtonClick(callbackData, chatId);
        }
    }

    /**
     * –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞, —Ç.–µ. —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ
     *–∏ –≤—ã—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–º–∞–Ω–¥–∞–º
     */
    public String handleCommand(String command) {
        switch (command) {
            case "/start":
                // StartCommand - –æ—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞,–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ª–æ–≥–∏—á–Ω–æ –±—ã–ª–æ –±—ã –Ω–∞ –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ –∫–ª–∞—Å—Å—É
                return startCommand.startTest();

            case "/help":
                return COMMAND_HELP;

            default:
                return COMMAND_UNKNOWN;
        }

    }

    /**
     * handleCallbackQuery - —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
     */
    public List<String> handleCallbackQuery(Update update) {
        String callbackData = update.getCallbackQuery().getData();
        long chatId = update.getCallbackQuery().getMessage().getChatId();

        String responseText = processCallbackData(callbackData, chatId);
        String keyboardType = getKeyboardForCallback(callbackData, chatId);

        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫: [chatId, responseText, keyboardType]
        List<String> result = new ArrayList<>();
        result.add(String.valueOf(chatId));
        result.add(responseText);
        result.add(keyboardType != null ? keyboardType : "");

        return result;
    }


    // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    public List<String> onUpdateReceived(Update update) {
        List<String> result = new ArrayList<>();

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        if (update.hasCallbackQuery()) {
            return handleCallbackQuery(update);

        //–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã ( –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –∫–æ–º–∞–Ω–¥—ã –≤–µ–¥–µ–Ω–Ω—É—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã))
        } else if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            // –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
            if (messageText.startsWith("/")) {
                String responseText = handleCommand(messageText);
                String keyboardType = getKeyboardForCommand(messageText, chatId);

                result.add(String.valueOf(chatId));
                result.add(responseText);
                result.add(keyboardType != null ? keyboardType : "");

                System.out.println("–æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é: " + messageText);
            }
        }
        return result;
    }


    /**
     *  –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
     */
    public String getKeyboardForCallback(String callbackData, long chatId) {
        switch (callbackData) {
            case "yes_button" -> { return "test_answers"; }
            case "A_button", "B_button", "C_button", "D_button" -> {
                if (testHandler.isTestActive(chatId)) { return "test_answers"; }
            }
            case "no_button" -> { return "start"; }
        }
        return null;
    }

    //–ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é
    public String getKeyboardForCommand(String command, long chatId) {
        if (command != null && command.equals("/start")) {
            return "start";
        }
        return null;
    }
    public KeyboardService getKeyboardService() {
        return keyboardService;
    }
}
