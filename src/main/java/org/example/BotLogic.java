package org.example;

import java.util.Map;

/**
 * BotLogic - –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞.
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 */
public class BotLogic {
    private final StartCommand startCommand;
    private final TestHandler testHandler;
    private final KeyboardService keyboardService;

    public BotLogic() {
        this.testHandler = new TestHandler();
        this.startCommand = new StartCommand(this.testHandler);
        this.keyboardService = new KeyboardService();
    }

    private static final String COMMAND_HELP = "üåç *GlobeTalk - –ò–∑—É—á–µ–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤* üåç\n\n" +
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n" +
            "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n" +
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
            "üéØ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**\n\n" +
            "GlobeTalk –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ —á–µ—Ä–µ–∑:\n" +
            "‚Ä¢ üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è\n\n" +
            "üõ†Ô∏è **–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:**\n" +
            "‚Ä¢ üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n" +
            "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n" +
            "üí° **–ö–∞–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:**\n" +
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é (—Å–ª–µ–≤–∞)\n" +
            "‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n" +
            "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞\n" +
            "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n" +
            "üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å!**";

    private static final String COMMAND_UNKNOWN = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";

    /** –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ */
    public String[] handleCallbackData(String callbackData, long chatId) {
        String responseText;
        String keyboardType = null;

        if ("A_button".equals(callbackData) || "B_button".equals(callbackData) ||
                "C_button".equals(callbackData) || "D_button".equals(callbackData)) {
            responseText = testHandler.handleAnswer(callbackData, chatId);
            if (testHandler.isTestActive(chatId)) keyboardType = "test_answers";
        } else {
            responseText = startCommand.handleButtonClick(callbackData, chatId);
            if ("yes_button".equals(callbackData)) keyboardType = "test_answers";
            if ("no_button".equals(callbackData)) keyboardType = "start";
        }

        return new String[]{responseText, keyboardType};
    }

    /** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start, /help –∏ –¥—Ä—É–≥–∏—Ö */
    public String[] handleCommand(String command, long chatId) {
        String responseText;
        String keyboardType = null;

        switch (command) {
            case "/start":
                responseText = startCommand.startTest();
                keyboardType = "start";
                break;
            case "/help":
                responseText = COMMAND_HELP;
                break;
            default:
                responseText = COMMAND_UNKNOWN;
        }

        return new String[]{responseText, keyboardType};
    }

    /** –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö */
    public String[] processInput(String inputType, long chatId, String data) {
        if ("callback".equals(inputType)) {
            return handleCallbackData(data, chatId);
        } else if ("message".equals(inputType)) {
            if (data.startsWith("/")) {
                return handleCommand(data, chatId);
            }
        }
        return null;
    }

    /** –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–ª–æ–≤–∞—Ä–µ–π –∫–Ω–æ–ø–æ–∫ */
    public Map<String, String> getStartButtons() {
        return keyboardService.getStartButtons();
    }

    public Map<String, String> getTestButtons() {
        return keyboardService.getTestButtons();
    }
}
