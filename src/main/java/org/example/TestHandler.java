package org.example;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏ —Ç–µ—Å—Ç–∞:
 * –•—Ä–∞–Ω–∏—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—ã, —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ø–æ–¥—Å—á—ë—Ç –±–∞–ª–ª–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º, —Å–æ–∑–¥–∞–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ A/B/C/D.
 */

public class TestHandler {

    // –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private final Map<Long, UserData> users = new HashMap<>();

    private static final String ANSWER_ERROR = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç–µ.";
    private static final String AGAIN_TEST = "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /start.";

    /**
     * –†–∞–∑–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–∞, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã, –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
     * –∏ –æ–±—â–∏–π —Å—á—ë—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     *
     */

    public String generateTest(long chatId, String test) {
        Pattern pattern = Pattern.compile(
                "(\\d+).?\\s*\\((\\d+)\\s*[points]*\\)\\s*\\n" +
                        "(.+?)\\n" +
                        "(A\\..+?)\\n" +
                        "(B\\..+?)\\n" +
                        "(C\\..+?)\\n" +
                        "(D\\..+?)\\n" +
                        "Answer:\\s*?([A-D])",
                Pattern.DOTALL
        );

        Matcher matcher = pattern.matcher(test);
        List<String> questions = new ArrayList<>();
        List<String> answers = new ArrayList<>();
        List<Integer> pointsList = new ArrayList<>();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å
        while (matcher.find()) {
            String points = matcher.group(2);
            String question = matcher.group(3).trim();
            String answerA = matcher.group(4).trim();
            String answerB = matcher.group(5).trim();
            String answerC = matcher.group(6).trim();
            String answerD = matcher.group(7).trim();
            String correctAnswer = matcher.group(8).trim();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –±–∞–ª–ª–æ–≤
            String questionText = question + "\n" +
                    answerA + "\n" +
                    answerB + "\n" +
                    answerC + "\n" +
                    answerD;

            questions.add(questionText);
            answers.add(correctAnswer);
            pointsList.add(Integer.parseInt(points));
        }

        if (questions.isEmpty()) {
            return ANSWER_ERROR;
        }

        UserData userData = new UserData();
        userData.setCurrentTest(questions);
        userData.setCorrectAnswers(answers);
        userData.setQuestionPoints(pointsList);
        userData.setCurrentIndex(0);
        userData.setTotalScore(0);

        users.put(chatId, userData);

        return questions.getFirst();
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞ (–∫–Ω–æ–ø–∫–∏ A/B/C/D).
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞, –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
     * –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º.
     */

    public String handleAnswer(String callbackData, long chatId) {
        UserData userData = users.get(chatId);

        if (userData == null) {
            return AGAIN_TEST;
        }

        String chosen = callbackData.substring(0, 1);

        int index = userData.getCurrentIndex();
        List<String> correctAnswers = userData.getCorrectAnswers();
        List<Integer> pointsList = userData.getQuestionPoints();

        if (correctAnswers.get(index).equalsIgnoreCase(chosen)) {
            userData.setTotalScore(userData.getTotalScore() + pointsList.get(index));
        }

        userData.setCurrentIndex(index + 1);

        if (userData.getCurrentIndex() >= userData.getCurrentTest().size()) {

            int totalPoints = pointsList.stream().mapToInt(Integer::intValue).sum();
            int earnedPoints = userData.getTotalScore();

            users.remove(chatId); // –æ—á–∏—â–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é

            String languageLevel;
            if (earnedPoints <= 6) {
                languageLevel = "A1-A2 (–ù–∞—á–∞–ª—å–Ω—ã–π)";
            } else if (earnedPoints <= 12) {
                languageLevel = "B1-B2 (–°—Ä–µ–¥–Ω–∏–π)";
            } else {
                languageLevel = "C1-C2 (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)";
            }

            return "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéâ\n\n" +

                    "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n" +
                    "üèÜ –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: " + earnedPoints + " –∏–∑ " + totalPoints + " –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n" +
                    "üìà –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º: " + languageLevel + "\n\n" +

                    "‚ú® **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** ‚ú®\n\n";
        }

        return userData.getCurrentTest().get(userData.getCurrentIndex());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     */

    public boolean isTestActive(long chatId) {
        UserData userData = users.get(chatId);
        return userData != null &&
                userData.getCurrentIndex() < userData.getCurrentTest().size();
    }

}
