package org.example;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import java.util.Map;

/**
 * TelegramBotTest - —Ç–µ—Å—Ç—ã –Ω–∞ –ª–æ–≥–∏–∫—É –∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö
 */

public class TelegramBotTest {
    private final BotLogic botLogic = new BotLogic();
    private final TestHandler testHandler = new TestHandler();
    public final KeyboardService keyboardService = new KeyboardService();

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
     */
    @Test
    void testStartCommand() {
        String result = botLogic.handleCommand("/start");

        Assertions.assertEquals("üåç *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlobeTalk!* üåç\n\n" +
                "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤! üéØ\n\n" +
                "üìö **–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—É—á–µ–Ω–∏—è** —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º.\n\n" +
                "üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å!\n\n" +
                "üîç –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–∂–º–∏—Ç–µ /help\n\n" +
                "üöÄ **–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç?**", result);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
     */
    @Test
    void testHelpCommand() {
        String result = botLogic.handleCommand("/help");

        Assertions.assertEquals("üåç *GlobeTalk - –ò–∑—É—á–µ–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤* üåç\n\n" +

                "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n" +
                "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n" +
                "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +

                "üéØ **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**\n\n" +
                "GlobeTalk –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ —á–µ—Ä–µ–∑:\n" +
                "‚Ä¢ üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è\n\n" +

                "üõ†Ô∏è **–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:****\n" +
                "‚Ä¢ üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n" +
                "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n" +

                "üí° **–ö–∞–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:**\n" +
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é (—Å–ª–µ–≤–∞)\n" +
                "‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n" +
                "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞\n" +
                "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n" +

                "üöÄ **–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å!**", result);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
     */
    @Test
    void testUnknownCommand() {
        String result = botLogic.handleCommand("/unknown");

        Assertions.assertEquals("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", result);
    }

    private String testText;

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
     */
    @BeforeEach
    void testGenerateTest() {
        testText = """
                1 (1 points)
                What is the capital of France?
                A. London
                B. Paris
                C. Madrid
                D. Rome
                Answer: B
                
                2 (2 points)
                Which word is a verb?
                A. Apple
                B. Run
                C. Table
                D. House
                Answer: B
                
                3 (3 points)
                Choose the correct sentence:
                A. He go to school.
                B. He goes to school.
                C. He going to school.
                D. He gone to school.
                Answer: B
                """;

        testHandler.generateTest(12345L, testText);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
     * –û–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ TestHendler, —Ç–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∏–∏ –≤ –≤–∏–¥–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
     */
    @Test
    void testCorrectVsIncorrectScoreDifference() {
        String simpleTest = """
            1 (10 points)
            Simple question?
            A. Wrong
            B. Correct
            C. Wrong
            D. Wrong
            Answer: B
            """;

        // –¢–ï–°–¢ 1: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        testHandler.generateTest(11111L, simpleTest);
        //–ø—Å–µ–≤–¥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
        //–∏ –≤ correctFinalResponse –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞–ª–ª—ã
        String correctFinalResponse = testHandler.handleAnswer("B_button", 11111L);

        // –¢–ï–°–¢ 2: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        testHandler.generateTest(22222L, simpleTest);
        //—Ç–æ–∂–µ —Å–∞–º–æ–µ, –Ω–æ –±–∞–ª–ª—ã –Ω–µ –Ω–∞—á–∏–ª—è—é—Ç—Å—è
        String incorrectFinalResponse = testHandler.handleAnswer("A_button", 22222L);

        // –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º 10 –±–∞–ª–ª–æ–≤ (—É–∫–∞–∑–∞–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏)
        //—Ç—É—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ assertTrue, –ø–æ—Ç–æ–º—É —á—Ç–æ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫—É, –∞ –∏–º–µ–Ω–Ω–æ –∫–æ–ª–≤–æ –±–∞–ª–ª–æ–≤
        Assertions.assertTrue(correctFinalResponse.contains("10 –∏–∑ 10"),
                "–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ –±–∞–ª–ª—ã. –ü–æ–ª—É—á–µ–Ω–æ: " + correctFinalResponse);

        // –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º 0 –±–∞–ª–ª–æ–≤
        Assertions.assertTrue(incorrectFinalResponse.contains("0 –∏–∑ 10"),
                "–ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –±–∞–ª–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è. –ü–æ–ª—É—á–µ–Ω–æ: " + incorrectFinalResponse);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å A1-A2
     */
    @Test
    void testFinalAnswerMinimalLevel() {
        String customTestText = """
                1 (6 points)
                Test question?
                A. Wrong
                B. Correct
                C. Wrong
                D. Wrong
                Answer: B
                """;

        testHandler.generateTest(12345L, customTestText);
        String finalResponse = testHandler.handleAnswer("A_button", 12345L);

        String expectedResponse = "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéâ\n\n" +

                "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n" +
                "üèÜ –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: 0 –∏–∑ 6 –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n" +
                "üìà –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º: A1-A2 (–ù–∞—á–∞–ª—å–Ω—ã–π)\n\n" +

                "‚ú® **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** ‚ú®\n\n";

        Assertions.assertEquals(expectedResponse, finalResponse);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å C1-C2.
     */
    @Test
    void testFinalAnswerMaximalLevel() {
        String customTestText = """
                1 (14 points)
                Test question?
                A. Wrong
                B. Correct
                C. Wrong
                D. Wrong
                Answer: B
                """;

        testHandler.generateTest(12345L, customTestText);
        String finalResponse = testHandler.handleAnswer("B_button", 12345L);

        String expectedResponse = "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéâ\n\n" +

                "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n" +
                "üèÜ –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: 14 –∏–∑ 14 –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n" +
                "üìà –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º: C1-C2 (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)\n\n" +

                "‚ú® **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** ‚ú®\n\n";

        Assertions.assertEquals(expectedResponse, finalResponse);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –∏ –≤ –∫–æ–Ω—Ü–µ –≤—ã–≤–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å B1-B2
     */
    @Test
    void testScoreCalculation() {
        String testText = """
                1 (6 points)
                Question 1?
                A. Wrong
                B. Correct
                C. Wrong
                D. Wrong
                Answer: B
                
                2 (6 points)
                Question 2?
                A. Wrong
                B. Correct
                C. Wrong
                D. Wrong
                Answer: B
                
                3 (6 points)
                Question 3?
                A. Wrong
                B. Correct
                C. Wrong
                D. Wrong
                Answer: B
                """;

        testHandler.generateTest(99999L, testText); // –î–†–£–ì–û–ô chatId —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
        testHandler.handleAnswer("B_button", 99999L);//–≤–∫—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç (+6 –±–∞–ª–ª–æ–≤)
        testHandler.handleAnswer("A_button", 99999L); //–Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
        String finalResponse = testHandler.handleAnswer("B_button", 99999L);//–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç

        String expectedResponse = "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéâ\n\n" +

                "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n" +
                "üèÜ –ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: 12 –∏–∑ 18 –≤–æ–∑–º–æ–∂–Ω—ã—Ö\n" +
                "üìà –£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è —è–∑—ã–∫–æ–º: B1-B2 (–°—Ä–µ–¥–Ω–∏–π)\n\n" +

                "‚ú® **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** ‚ú®\n\n";

        Assertions.assertEquals(expectedResponse, finalResponse);
    }

    //              –¢–ï–°–¢–´ –ù–ê –ö–ù–û–ü–ö–ò

    /**
     * –¢–µ—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ –∫–Ω–æ–ø–æ–∫
     */
    @Test
    void testStartKeyboardButtons() {
        Map<String, String> startButtons = keyboardService.getStartButtonConfigs();

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è yes_button
        Assertions.assertEquals("yes_button", startButtons.get("–ö–æ–Ω–µ—á–Ω–æ!"));

        //–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è no_button
        Assertions.assertEquals("no_button", startButtons.get("–ù–∞–∑–∞–¥"));

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        Assertions.assertEquals(2, startButtons.size());
    }
    /**
     * –¢–µ—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ –∫–Ω–æ–ø–æ–∫
     */
    @Test
    void testAnswerKeyboardButtons() {
        Map<String, String> answerButtons = keyboardService.getTestAnswerConfigs();

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ A, B, C, D
        Assertions.assertEquals("A_button", answerButtons.get("A"));
        Assertions.assertEquals("B_button", answerButtons.get("B"));
        Assertions.assertEquals("C_button", answerButtons.get("C"));
        Assertions.assertEquals("D_button", answerButtons.get("D"));

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
        Assertions.assertEquals(4, answerButtons.size(),
                "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ");
    }

    /**
     * –¢–µ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (no_button)
     */
    @Test
    void testNoButtonProcessing() {
        String response = botLogic.processCallbackData("no_button", 12345L);

        String expectedResponse =
                "üí™ *–ù–µ —Å–æ–º–Ω–µ–≤–∞–π—Ç–µ—Å—å –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö!* üí™\n\n" +
                        "üìñ –¢–µ—Å—Ç –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å\n\n" +
                        "üïê –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start\n\n" +
                        "üîç –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ /help";

        Assertions.assertEquals(expectedResponse, response);

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è no_button –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∫–Ω–æ–ø–æ–∫
        String keyboardType = botLogic.getKeyboardForCallback("no_button", 12345L);
        Assertions.assertEquals("start", keyboardType);
    }

}